// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String  @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Social {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  github       String?
  facebook     String?
  userId       String @db.ObjectId @unique
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("socials")
}

model User {
  id                    String @id @default(auto()) @map("_id") @db.ObjectId
  name                  String?
  email                 String? @unique
  password              String?
  emailVerified         DateTime?
  image                 String?
  onboarded             Boolean?  @default(false)
  social                Social?

  accounts              Account[]
  sessions              Session[]
  posts                 Post[]
  bookmarks             Bookmark[]
  // GuildMember     GuildMember[]
  comments              Comment[]
  upvotes               Upvote[]
  joinRequests          JoinRequest[]

  sentNotifications     Notification[] @relation("SentNotifications")
  receivedNotifications Notification[] @relation("ReceivedNotifications")

  guildsBelongId        String[] @db.ObjectId
  guildsBelong          Guild[]  @relation("GuildMembers", fields: [guildsBelongId], references: [id])

  guildsCreatedId       String[] @db.ObjectId
  guildsCreated         Guild[]  @relation("GuildCreator" )

  // try
  // guildsModeratedId     String[] @db.ObjectId
  // guildsModerated       Guild[]  @relation("GuildModerators", fields: [guildsBelongId], references: [id])

  createdAt             DateTime  @default(now()) @map(name: "created_at")
  updatedAt             DateTime  @updatedAt @map(name: "updated_at")

  @@map("users")
}

model Guild {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  image           Image
  name            String @unique
  description     String?
  isPrivate       Boolean @default(false)
  
  creatorId       String @db.ObjectId
  creator         User  @relation("GuildCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  
  membersId       String[] @db.ObjectId
  members         User[]  @relation("GuildMembers", fields: [membersId], references: [id])

  // try
  // moderatorsId    String[] @db.ObjectId
  // moderator       User[]  @relation("GuildModerators", fields: [moderatorsId], references: [id])

  joinRequests    JoinRequest[]

  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")

  @@map("guilds")
}

model JoinRequest {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  guildId        String @db.ObjectId
  guild          Guild @relation(fields: [guildId], references: [id], onDelete: Cascade)

  senderId       String @db.ObjectId
  sender         User @relation(fields: [senderId], references: [id], onDelete: Cascade)

  // guildCreatorId String @db.ObjectId
  notifications  Notification[]

  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @updatedAt @map(name: "updated_at")

  @@map("join-requests")
}
// model GuildMember {
//   id               String @id @default(auto()) @map("_id") @db.ObjectId
//   memberId           String
//   user             User  @relation(fields: [memberId], references: [id]) 
// }

model Blog {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  postId        String @db.ObjectId @unique
  post          Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  title         String
  content       String
  thumbnail     Image

  @@map("blogs")
}

model Post {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String @db.ObjectId
  author        User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  type          PostType
  tags          String[]
  upvoteCount   Int @default(0)

  diary         Diary? 
  blog          Blog?
  notifications Notification[]
       
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  bookmarks     Bookmark[]
  comments      Comment[]
  upvotes       Upvote[]

  @@map("posts")
}

model Diary {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  postId         String @db.ObjectId @unique
  post           Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  title          String
  codeSnippet    String?
  description    String
  solution       String

  @@map("diaries")
}

model Bookmark {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userId        String @db.ObjectId
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId        String @db.ObjectId
  post          Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")

  @@map("bookmarks")
}

model Comment {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  content      String     
  
  userId       String @db.ObjectId
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // parentId     String?  @db.ObjectId
  // parent       Comment?   @relation("ParentComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  // childReplies   Comment[]  @relation("ParentComment")

  postId       String @db.ObjectId
  post         Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")

  @@map("comments")
}

model Upvote {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userId        String @db.ObjectId
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId        String @db.ObjectId
  post          Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map("upvotes")
}

model Notification {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  viewed        Boolean @default(false)
  type          NotificationType

  postId        String? @db.ObjectId
  post          Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  joinRequestId String? @db.ObjectId
  joinRequest   JoinRequest? @relation(fields: [joinRequestId], references: [id], onDelete: Cascade)
    
  senderId      String @db.ObjectId
  sender        User @relation("SentNotifications", fields: [senderId], references: [id], onDelete: Cascade)

  recipientId   String @db.ObjectId
  recipient     User @relation("ReceivedNotifications",fields: [recipientId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")

  @@map("notifications")
}


model Tag {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  tagName    String

  @@map("tags")
}

enum NotificationType  {
  UPVOTE
  JOIN_REQUEST
}

enum PostType  {
  BLOG_POST 
  CODE_DIARY
}

type Image {
  imageKey String
  imageUrl String
}

