// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String  @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

type Image {
  imageKey String
  imageUrl String
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  password        String?
  emailVerified   DateTime?
  image           String?
  onboarded       Boolean?  @default(false)
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @default(now()) @map(name: "updated_at")
  Account         Account[]
  Session         Session[]
  Post            Post[]

  guildsBelongId  String[] @db.ObjectId
  guildsBelong     Guild[]  @relation("GuildMembers", fields: [guildsBelongId], references: [id])

  guildsCreatedId String[] @db.ObjectId
  guildsCreated   Guild[]  @relation("GuildCreator")
}

model Guild {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  guildName       String

  guildCreatorId  String @db.ObjectId
  guildCreator    User  @relation("GuildCreator", fields: [guildCreatorId], references: [id])
  
  guildMembersId  String[] @db.ObjectId
  guildMembers    User[]  @relation("GuildMembers", fields: [guildMembersId], references: [id])

  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @default(now()) @map(name: "updated_at")
}

// TODO: create schema for the other collections
model Post {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  authorId      String @db.ObjectId
  author         User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  type          PostType
  tags          String[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
}

enum PostType  {
  BLOG_POST
  BUG_POST
}